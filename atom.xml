<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Milu&#39;s Blog</title>
  
  <subtitle>web前端、深度学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-07T06:39:22.967Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Milu Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>canvas实现小游戏</title>
    <link href="http://yoursite.com/2019/03/07/canvas%E5%AE%9E%E7%8E%B0%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/03/07/canvas实现小游戏/</id>
    <published>2019-03-07T06:32:10.000Z</published>
    <updated>2019-03-07T06:39:22.967Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="小游戏创建流程"><a href="#小游戏创建流程" class="headerlink" title="小游戏创建流程"></a>小游戏创建流程</h2><ol><li><p>创建画布–创建<code>canvas</code>元素并设置其宽高属性，最后添加至<code>&lt;body&gt;</code>标签后</p><ul><li><code>document.createElement()</code> </li><li><code>canvas.getContext(&quot;2d&quot;)</code></li><li><code>canvas.width/canvas.height</code></li></ul></li><li><p>准备图片–创建图片对象，声明图片加载flag，设置图片<code>src</code>属性</p><ul><li><code>new Image()</code></li><li><code>bgImage.onload = {}</code></li><li><code>bgImage.src</code></li></ul></li><li><p>游戏对象–创建英雄、怪物对象。英雄有个<code>speed</code>属性控制他每秒移动多少像素。用<code>monsterCaught</code>存储怪物被捉住的次数，初始值为0</p><ul><li><code>hero</code></li><li><code>monster</code></li><li><code>monsterCaught</code></li></ul></li><li><p>处理用户的输入–先保存用户的输入至<code>keysDown</code>对象，稍后再做相应处理</p><ul><li><code>keysDown</code></li><li><code>addEventLinstener()</code></li></ul></li><li><p>开始一轮游戏–用<code>reset</code>开始一轮新的游戏，每次将怪物放到一个随机的地方</p><ul><li><code>hero.x/hero.y</code></li><li><code>reset=function(){}</code></li><li><code>monster.x/monster.y</code></li></ul></li><li><p>更新对象–更新<code>hero</code>的坐标，控制其移动，判断<code>hero</code>是否抓到<code>monster</code>，抓到就<code>reset()</code>。传入<code>modifier</code>变量，<code>update</code>在<code>main</code>函数调用</p><ul><li><code>update=function(){}</code></li><li><code>if(38/39/40/37 in keysDown)</code></li><li><code>if（）</code>//判断是否抓到</li></ul></li><li><p>渲染物体–之前的代码都是准备前期工作和处理游戏状态等，接下去需要把所以东西画出来。先画背景图，再画人物。调用<code>fillText</code>绘制文字。绘制部分完成！</p><ul><li><code>render=function(){}</code> //image ready了，才画进去</li><li><code>cxt.drawImage(image,x,y)</code> //之前计算得到的<code>hero.x/y</code>,<code>monster.x/y</code>,此处渲染的时候可用。</li><li><code>fillStyle/font/textAlign/textBaseline/fillText(&quot;&quot;,x,y)</code></li></ul></li><li><p>主循环函数–实现游戏的循环结构，将它放在<code>main</code>里。先拿到时间差，将时间差/1000，传入<code>update()</code>函数，再<code>render()</code>，并将本次的时间保存下来。最后用<code>requestAnimationFrame(main)</code>循环函数。</p><ul><li><code>main=function(){}</code></li><li><code>requestAnimationFrame()</code></li></ul></li><li><p>设置<code>requestAnimationFrame()</code>–浏览器兼容性的解决</p><ul><li><code>var w=window;</code></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestAnimationFrame = w.requestAnimationFrame ||w.webkitRequestAnimationFrame ||w.msRequestAnimationFrame || w.mozRequestAnimationFrame;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>最后启动游戏</p><ul><li><code>then</code></li><li><code>reset()</code></li><li><code>main()</code></li></ul></li></ol><h2 id="代码-amp-图片"><a href="#代码-amp-图片" class="headerlink" title="代码&amp;图片"></a>代码&amp;图片</h2><h3 id="HTML-code"><a href="#HTML-code" class="headerlink" title="HTML code"></a>HTML code</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;title&gt;Simple Canvas Game&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script src=&quot;js/game.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="JS-code"><a href="#JS-code" class="headerlink" title="JS code"></a>JS code</h3><pre><code>var canvas = document.createElement(&quot;canvas&quot;);var ctx = canvas.getContext(&quot;2d&quot;);canvas.width = 512;canvas.height = 480;document.body.appendChild(canvas);//Background imagevar bgReady = false;var bgImage = new Image();bgImage.onload = function(){    bgReady = true;};bgImage.src = &quot;images/background.png&quot;;//hero imagevar heroReady = false;var heroImage = new Image();heroImage.onload = function(){    heroReady = true;};heroImage.src = &quot;images/hero.png&quot;;//monster imagevar monsterReady = false;var monsterImage = new Image();monsterImage.onload = function(){    monsterReady = true;};monsterImage.src = &quot;images/monster.png&quot;;var hero = {    speed:256 //movement in pixels per second};var monster = {};var monsterCaught = 0;//handle keyboard controlsvar keysDown = {};addEventListener(&quot;keydown&quot;,function(e){    keysDown[e.keyCode] = true;},false);addEventListener(&quot;keyup&quot;,function(e){    delete keysDown[e.keyCode];},false);hero.x = canvas.width/2;hero.y = canvas.height/2;var reset = function(){    //Throw the monster somewhere on the screen randomly    monster.x = 32 + (Math.random() * (canvas.width - 64));    monster.y = 32 + (Math.random() * (canvas.height - 64))};var update = function(modifier){    if (38 in keysDown){//player holding up        hero.y -= hero.speed * modifier;    }    if (40 in keysDown){//down        hero.y += hero.speed * modifier;    }    if (37 in keysDown){//left        hero.x -= hero.speed * modifier;    }    if (39 in keysDown){//right        hero.x += hero.speed * modifier;    }    //保持英雄一直在画布里面。左右不互通，上下互通。    if(hero.x &gt; canvas.width-32){        hero.x = canvas.width-32;    }    if(hero.x &lt; 0){        hero.x = 0;    }    if(hero.y &gt; canvas.height){        hero.y = 0;    }    if(hero.y &lt; 0){        hero.y = canvas.height;    }    //are they touching?    if(        hero.x &lt;= (monster.x + 31)        &amp;&amp; monster.x &lt;= (hero.x + 31)        &amp;&amp; hero.y &lt;= (monster.y +32)        &amp;&amp; monster.y &lt;= (hero.y + 32)    ){        ++monsterCaught;        reset();    }};//Draw everythingvar render = function(){    if (bgReady){        ctx.drawImage(bgImage,0,0);    }    if(heroReady){        ctx.drawImage(heroImage,hero.x,hero.y);    }    if(monsterReady){        ctx.drawImage(monsterImage,monster.x,monster.y);    }    //score    ctx.fillStyle = &quot;rgb(250,250,250)&quot;;    ctx.font = &quot;24px Helvetica&quot;;    ctx.textAlign = &quot;left&quot;;    ctx.textBaseline = &quot;top&quot;;    ctx.fillText(&quot;Goblins caught:&quot; + monsterCaught,32, 32);};//The main game loopvar main = function(){    var now = Date.now();    var delta = now - then;    //console.log(delta);    update(delta/1000);    render();    then = now;    //request to do this again ASAP    requestAnimationFrame(main);};var w = window;requestAnimationFrame = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.msRequestAnimationFrame || w.mozRequestAnimationFrame;var then = Date.now();reset();main();</code></pre><h3 id="Photos"><a href="#Photos" class="headerlink" title="Photos"></a>Photos</h3><p><img src="https://i.imgur.com/PC0A0O0.png" alt="background.png"><br><img src="https://i.imgur.com/JfExtZp.png" alt="hero.png"><br><img src="https://i.imgur.com/TWnP191.png" alt="monster.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;小游戏创建流程&quot;&gt;&lt;a href=&quot;#小游戏创建流程&quot; class=&quot;headerlink&quot; title=&quot;小游戏创建流程&quot;&gt;&lt;/a&gt;小游戏创建流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建画布–创建&lt;code&gt;canvas&lt;/code&gt;元素并
      
    
    </summary>
    
    
      <category term="JavaScript,canvas" scheme="http://yoursite.com/tags/JavaScript-canvas/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js事件修饰符</title>
    <link href="http://yoursite.com/2019/01/10/Vue-js%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/01/10/Vue-js事件修饰符/</id>
    <published>2019-01-10T06:58:22.000Z</published>
    <updated>2019-01-10T08:33:33.380Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h2 id="Vue-js事件修饰符的作用"><a href="#Vue-js事件修饰符的作用" class="headerlink" title="Vue.js事件修饰符的作用"></a>Vue.js事件修饰符的作用</h2><p>&emsp;&emsp;学习vue.js时，对事件修饰符充满疑惑，于是寻找了一下大家的理解，加以代码验证，才算是解决了我的疑问。<br><br>&emsp;&emsp;首先，事件修饰符有以下这些：</p><ul><li>.stop          &emsp;&emsp;//阻止事件继续传播</li><li>.prevent  &emsp;&emsp;//阻止页面重载</li><li>.capture  &emsp;&emsp;//添加事件侦听器时使用事件捕获模式，先在此先处理，再交由内部元素处理（若有多个该修饰符的元素则由外而内触发） </li><li>.self     &emsp;&emsp;//当事件在该元素本身（而不是子元素）触发时触发回调(即直接作用在该元素上的事件才可以执行) </li><li>.once    &emsp;&emsp;//事件只触发一次</li><li>.passive   &emsp;&emsp;//事件的默认行为立即触发</li></ul><h3 id="代码测试一：-once-prevent-capture-stop-self"><a href="#代码测试一：-once-prevent-capture-stop-self" class="headerlink" title="代码测试一： .once .prevent .capture .stop .self"></a>代码测试一： .once .prevent .capture .stop .self</h3><p>可以通过以下代码测试事件的传播顺序，以理解这些修饰符的功能。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;title&gt;Modifiers&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;    &lt;script src=&apos;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&apos;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot; @click=&quot;clickme&quot;&gt;   &lt;!--  &lt;section id=&quot;section&quot; @click.stop=&quot;clickme&quot;&gt; --&gt; &lt;section id=&quot;section&quot; @click.capture=&quot;clickme&quot;&gt;&lt;div id=&quot;div&quot; @click.prevent=&quot;clickme&quot;&gt;&lt;span id=&quot;span&quot; @click.self=&quot;clickme&quot;&gt;&lt;p id=&quot;p&quot; @click.once=&quot;clickme&quot;&gt;用鼠标双击我，看看事件的传递真正顺序。&lt;/p&gt;&lt;/span&gt;&lt;/div&gt;&lt;/section&gt;点击事件的响应顺序如下：{{message}}&lt;/div&gt;&lt;script&gt;var vm = new Vue({el: &apos;#app&apos;,data: {  message: &apos;&apos;},methods: {  clickme: function (event) {if (this.message === &apos;&apos;) {this.message = event.currentTarget.id} else {this.message = this.message + &apos;-&gt;&apos; + event.currentTarget.id}  }}})&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><br><br>&emsp;&emsp;点击一次，会得到点击事件的响应顺序如下：<strong>section-&gt;p-&gt;div-&gt;app</strong><br>因为.capture先捕捉到点击事件，所以section执行clickme；然后再交由内部p处理，p中修饰符为.once，所以只执行一次clickme；传到span，.self判断是否是该元素本身触发，否，所以不执行clickme；传到id为div的div中，prevent阻止了其click事件触发的默认行为，但可以触发回调函数，所以div执行clickme；最后传到id=”app”的div中，执行clickme。<br><br><br>&emsp;&emsp;第二次点击，事件响应为：<strong>section-&gt;div-&gt;app</strong>，并之后每次点击都循环此响应，是因为p中含有.once修饰符，只会触发一次事件。<br><br></p><p>&emsp;&emsp;要测试.stop修饰符只需把上面代码的section 的 .capture修饰符改为 .stop，可以发现，当事件传到此处，section会触发clickme事件，但事件不会再往外传，在此处stop传播了。点击一次的事件的响应顺序如下：<strong>p-&gt;div-&gt;section</strong></p><h3 id="代码测试二：-prevent-self-emsp-emsp-self-prevent"><a href="#代码测试二：-prevent-self-emsp-emsp-self-prevent" class="headerlink" title="代码测试二： .prevent.self &emsp;&emsp; .self.prevent"></a>代码测试二： .prevent.self &emsp;&emsp; .self.prevent</h3><p>&emsp;&emsp;为了测试<strong>.prevent.self</strong>与 <strong>.self.prevent</strong>的区别，我们使用以下代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;title&gt;Prevent修饰符&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;    &lt;script src=&apos;https://cdn.staticfile.org/vue/2.4.2/vue.min.js&apos;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;demo&quot; @click=&quot;clickme&quot;&gt;        &lt;a id=&quot;a&quot; href=&quot;/#&quot; @click.self.prevent=&quot;clickme&quot;&gt;        &lt;!-- &lt;a id=&quot;a&quot; href=&quot;/#&quot; @click.prevent.self=&quot;clickme&quot;&gt; --&gt;            &lt;span id=&quot;span&quot; @click=&quot;clickme&quot;&gt;点击我&lt;/span&gt;        &lt;/a&gt;        触发了哪些事件：{{message}}    &lt;/div&gt;    &lt;script&gt;    var vm = new Vue({        el: &quot;#demo&quot;,        data: {            message: &quot;&quot;        },        methods: {            clickme: function(event) {                if (this.message === &apos;&apos;) {                    this.message = event.currentTarget.id                } else {                    this.message = this.message + &apos;-&gt;&apos; + event.currentTarget.id                }            }        }    })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>&emsp;&emsp;运行以上代码，在页面点击<span>的内容，会发现，<strong>.self.prevent</strong> 修饰符使得：页面闪过 “<strong>触发了哪些事件：span-&gt;demo</strong>“，然后以迅雷不及掩耳之势跳转到你的”/#”下，我的是根目录界面。在此贴上我的浅薄的理解：<a>&lt;a>标签中的 .self.prevent 修饰符首先判断，是否点击的是该元素，由于点击的是&lt;a>元素内的&lt;span>,所以不执行clickme；prevent在self之后，所以只有当本元素被点击时才阻止页面跳转，因此该页面依然会跳转至其目标页面。</a><br><br><br>&emsp;&emsp;将注释内容解注释，并注释原先的&lt;a>语句，改为测试 <strong>.prevent.self</strong> ,页面不跳转，并显示——</span></p><blockquote><p>点击我 触发了哪些事件：span-&gt;demo</p></blockquote><p>.prevent阻止了&lt;a>标签的跳转，而其后的.self修饰符决定是否执”clickme”事件：满足点击的是本元素，则执行”clickme”；不满足，则不执行。在以上代码中点击的是&lt;span>元素，所以未执行”clickme”事件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>.prevent.self &emsp;&emsp;</strong> //阻止所有默认行为，必定不重载页面，而是否执行事件看是否满足.self</li><li><strong>.self.prevent  &emsp;&emsp;</strong> //阻止对自身的点击，如果点击的是自身，则不重载页面，但会执行事件；如果不是，重载页面，不执行事件。</li><li><strong>.stop</strong> &emsp;&emsp;//阻止事件向上传播，在此stop。</li><li><strong>.prevent</strong> &emsp;&emsp;//阻止默认行为</li><li><strong>.capture</strong> &emsp;&emsp;//捕捉事件，先在此处理，后交由内部元素处理</li><li><strong>.once</strong> &emsp;&emsp;//事件只触发一次</li><li><strong>.self</strong> &emsp;&emsp;//当事件在该元素本身（而不是子元素）触发时触发回调(即直接作用在该元素上的事件才可以执行) </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Vue-js事件修饰符的作用&quot;&gt;&lt;a href=&quot;#Vue-js事件修饰符的作用&quot; class=&quot;headerlink&quot; title=&quot;Vue.js事件修饰符的作用&quot;&gt;&lt;/a&gt;Vue.js事件修饰符的作用&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;ems
      
    
    </summary>
    
    
      <category term="vue.js" scheme="http://yoursite.com/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>First blog</title>
    <link href="http://yoursite.com/2018/11/14/First-blog/"/>
    <id>http://yoursite.com/2018/11/14/First-blog/</id>
    <published>2018-11-14T15:08:46.000Z</published>
    <updated>2018-11-14T15:09:01.670Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><div align="center">过两天就是我的生日了，希望新的一岁能够技术大有长进，开心幸福。</div><blockquote><p>&emsp;&emsp;进入主题，这是一个为了熟悉Markdown文档编写而写的程序。</p></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p><br><br><em>为什么只有二级标题下面有下划线呀</em></p><p><strong>难道是二级标题就是厉害？</strong></p><p>我再试试</p><h2 id="果然是神器二级标题"><a href="#果然是神器二级标题" class="headerlink" title="果然是神器二级标题"></a>果然是神器二级标题</h2><p>哇，我已经不认识</p><blockquote><p>级</p></blockquote><p>这个字了！</p><p>现在来链接图片<br><img src="http://i2.bvimg.com/668773/f5f6189e2733a1d9.jpg" alt="Markdown"></p><blockquote><p>这就是仙女本仙了！</p></blockquote><p>美吧，推荐使用<a href="http://www.tietuku.com/" target="_blank" rel="noopener">贴图库</a>，免费注册，非常好用！</p><p>今天先这样，拜拜~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;过两天就是我的生日了，希望新的一岁能够技术大有长进，开心幸福。&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;进入主题，这是一个为了熟悉Markdown文档编写而写的程序。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://yoursite.com/2018/11/14/test-my-site/"/>
    <id>http://yoursite.com/2018/11/14/test-my-site/</id>
    <published>2018-11-14T07:34:22.000Z</published>
    <updated>2018-11-14T07:34:22.694Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/14/hello-world/"/>
    <id>http://yoursite.com/2018/11/14/hello-world/</id>
    <published>2018-11-14T07:25:33.576Z</published>
    <updated>2018-11-14T07:25:33.576Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
